const e=JSON.parse(`{"key":"v-2be73ce3","path":"/posts/nodejs-first-step.html","title":"Building a Basic Node.js Project","lang":"en-US","frontmatter":{"title":"Building a Basic Node.js Project","author":"MinhTD","description":"In this tutorial, we'll walk you through the process of creating a simple Node.js project that features user authentication with login and logout functionality, as well as a basic todo list. This project will utilize popular Node.js frameworks such as Express.js for handling HTTP requests and sessions, and it will employ a straightforward in-memory storage mechanism for demonstration purposes.\\nThe project begins with setting up a Node.js environment and initializing a new project using npm. We then install necessary dependencies like Express.js, body-parser, and express-session to handle routing, parsing request bodies, and managing user sessions, respectively.\\nThe core functionality of the project revolves around user authentication. We define middleware functions to check if a user is authenticated before granting access to certain routes. Users are stored in memory with their usernames and passwords, and authentication is performed by comparing provided credentials with those stored in memory.\\nOnce authenticated, users are granted access to the main todo list page, where they can add tasks to their list. The todo list itself is managed in-memory and is displayed dynamically on the page.\\nAdditionally, users have the option to log out, which destroys their session and redirects them back to the login page.\\nThis tutorial provides a foundational understanding of building a Node.js application with basic user authentication and data management functionalities. From here, you can extend the project by implementing features like user registration, persistent data storage with databases, and more advanced todo list functionalities. Happy coding!","tag":["NodeJS"],"category":["Guide"],"date":"2024-02-07T00:00:00.000Z","head":[["meta",{"property":"og:url","content":"https://minhtd18.github.io/posts/nodejs-first-step.html"}],["meta",{"property":"og:title","content":"Building a Basic Node.js Project"}],["meta",{"property":"og:description","content":"In this tutorial, we'll walk you through the process of creating a simple Node.js project that features user authentication with login and logout functionality, as well as a basic todo list. This project will utilize popular Node.js frameworks such as Express.js for handling HTTP requests and sessions, and it will employ a straightforward in-memory storage mechanism for demonstration purposes.\\nThe project begins with setting up a Node.js environment and initializing a new project using npm. We then install necessary dependencies like Express.js, body-parser, and express-session to handle routing, parsing request bodies, and managing user sessions, respectively.\\nThe core functionality of the project revolves around user authentication. We define middleware functions to check if a user is authenticated before granting access to certain routes. Users are stored in memory with their usernames and passwords, and authentication is performed by comparing provided credentials with those stored in memory.\\nOnce authenticated, users are granted access to the main todo list page, where they can add tasks to their list. The todo list itself is managed in-memory and is displayed dynamically on the page.\\nAdditionally, users have the option to log out, which destroys their session and redirects them back to the login page.\\nThis tutorial provides a foundational understanding of building a Node.js application with basic user authentication and data management functionalities. From here, you can extend the project by implementing features like user registration, persistent data storage with databases, and more advanced todo list functionalities. Happy coding!"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-06T19:45:48.000Z"}],["meta",{"property":"article:author","content":"MinhTD"}],["meta",{"property":"article:tag","content":"NodeJS"}],["meta",{"property":"article:published_time","content":"2024-02-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-06T19:45:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building a Basic Node.js Project\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-06T19:45:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MinhTD\\"}]}"]]},"headers":[{"level":2,"title":"Create a new directory for your project:","slug":"create-a-new-directory-for-your-project","link":"#create-a-new-directory-for-your-project","children":[]},{"level":2,"title":"Initialize a new Node.js project:","slug":"initialize-a-new-node-js-project","link":"#initialize-a-new-node-js-project","children":[]},{"level":2,"title":"Install necessary dependencies:","slug":"install-necessary-dependencies","link":"#install-necessary-dependencies","children":[]},{"level":2,"title":"Create a file named app.js:","slug":"create-a-file-named-app-js","link":"#create-a-file-named-app-js","children":[]}],"git":{"createdTime":1707248748000,"updatedTime":1707248748000,"contributors":[{"name":"Minh Truong","email":"Minh.Truong@silabs.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"posts/nodejs-first-step.md","localizedDate":"February 7, 2024","excerpt":"<p>First, make sure you have Node.js installed on your machine. Then follow these steps to create the project:</p>\\n<h2> Create a new directory for your project:</h2>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">mkdir</span> nodejs-login-todolist\\n<span class=\\"token builtin class-name\\">cd</span> nodejs-login-todolist\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{e as data};
